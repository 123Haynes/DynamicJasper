HOW-TO Add Subreports

 Usefull examples:
 
*----------+--------------+-------+
| <<Test>> | <<Description>> | <<Download PDF>> |
*----------+--------------+-------+
| {{{../xref-test/ar/com/fdvs/dj/test/subreport/SubReportBuilderTest.html}ar.com.fdvs.dj.test.subreport.SubReportBuilderTest}} | Creates a single Subreport | {{{../examples/SubReportBuilderTest.pdf}download}} |
*----------+--------------+-------+ 
| {{{../xref-test/ar/com/fdvs/dj/test/subreport/ConcatenatedReportTest.html}ar.com.fdvs.dj.test.subreport.ConcatenatedReportTest}} | Creates a subreport composed of 3 subreport | {{{../examples/ConcatenatedReportTest.pdf}download}} |
*----------+--------------+-------+ 

 Adding a subreport is really easy. The main class to create a report is the <<SubReportBuilder>> class.
 
 Subreports can be placed in the header or footer of a group, or we can just tell the <<DynamicReportBuilder>> 
 to concatenate a subreport to the end of the report we are building.
 
 A way to concatenate many different report in a single report can be done using subreports.
 
 A simple usage of the <<SubReportBuilder>> class would be:

+-----------------------------------------------------------------------------+
		Subreport subreport = new SubReportBuilder()
			.addDataSource( DJConstants.SUBREPORT_DATA_SOURCE_ORIGIN_FIELD, 
							DJConstants.DATA_SOURCE_TYPE_COLLECTION, 
							"statistics")
			.addReport( createSubreport() )
			.build();

		group.getFooterSubreports().add(subreport); //add to an existing group
+-----------------------------------------------------------------------------+

 The first call to the builer is:
 
+-----------------------------------------------------------------------------+ 
 .addDataSource( <origin of the data source>, <type of the data source>, <path to the data source>)
+-----------------------------------------------------------------------------+ 

 The <<origin of the data source>> is a constant from <<DJConstants>> class which can be: 
 SUBREPORT_DATA_SOURCE_ORIGIN_FIELD or SUBREPORT_DATA_SOURCE_ORIGIN_PARAMETER, it just tells the
 subreport where to look for the data source (the parameters map, or if its a property of the current row)
 
 The <<type of the data source>> is also a constant from <<DJConstants>> class, all types constants
 has a name like DATA_SOURCE_TYPE_\<XXX\>, where \<XXX\> represents the type. Most known types are
 java.sql.ResultSet, Collection, Array, Xml, etc.
 
 Finally, the <<path to the data source>> is a String that points to the data source. If for example
 it's value is <"subreportDatasource"> and the first parameter was SUBREPORT_DATA_SOURCE_ORIGIN_PARAMETER, then
 it will look in the parameters map for an object under the key of <"subreportDatasource">, on the other hand
 if we pass as first parameter SUBREPORT_DATA_SOURCE_ORIGIN_FIELD, in the current row, there must be a property
 with the name <"subreportDatasource"> that returns an object of the type DATA_SOURCE_TYPE_\<XXX\>
 
 
 The 2nd call is:
  
+-----------------------------------------------------------------------------+ 
 .addReport( <JasperReport object> )
+-----------------------------------------------------------------------------+ 

 The subreport need a compiled design (this would be a JasperReport object)
 
 Finally we build the subreport and we add it to a group. In this case, to the footer of a group
 
+-----------------------------------------------------------------------------+ 
 group.getFooterSubreports().add(subreport);
+-----------------------------------------------------------------------------+ 

 Or we can pass it to the <<GroupBuilder>> like this

+-----------------------------------------------------------------------------+ 
 groupBuilder.addHeaderSubreport(subreport);
+-----------------------------------------------------------------------------+ 

 or

+-----------------------------------------------------------------------------+ 
 groupBuilder.addFooterSubreport(subreport);
+-----------------------------------------------------------------------------+ 

 This is a example of a report with 2 different subreports
 
[../images/examples/subreport.jpg] Chart Report

*Adding the sub report at the end of the parent report  
 
 If we just want to add the report to the end of the current report, we use the <<DynamicReportBuilder>> like this:
 
+-----------------------------------------------------------------------------+ 
 drb.addConcatenatedReport(subreport)
+-----------------------------------------------------------------------------+ 

 We can add as many reports as we want
