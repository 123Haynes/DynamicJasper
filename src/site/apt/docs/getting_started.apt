		------
		Getting Started
		------
		Juan Manuel Alvarez
		------
		 Date
		 
Content

 * Try the examples first!
 
 * Creating a simple plain Report
 
 * Adding groups
		 
Try the examples first!

 The source code comes with examples ready to run (you need Maven 2 to build the source code) 
 
 The examples classes are: 
 
*----------+--------------+-------+
| <<Test>> | <<Description>> | <<Download PDF>> |
*----------+--------------+-------+
| ar.com.fdvs.dj.test.PlainReportTest |A simple report that  shows the basic setup of a report and its columns | {{{../examples/PlainReportTest.pdf}download}} |
*----------+--------------+-------+
| ar.com.fdvs.dj.test.StylesReportTest |Based on the PlainReportTest test, shows how to add some styles to the different elements in the report |  {{{../examples/StylesReportTest.pdf}download}} |
*----------+--------------+-------+
| ar.com.fdvs.dj.test.GroupsReportTest |Based on the StylesReportTest test, this test shows how to define groups and variables at the header and footer of each group | {{{../examples/GroupsReportTest.pdf}download}} |
*----------+--------------+-------+
| ar.com.fdvs.dj.test.ConditionalStylesReportTest |This test shows how to create a simple conditional style. The style of the values from a column changes as a certain condition is meat | {{{../examples/ConditionalStylesReportTest.pdf}download}} |
*----------+--------------+-------+
| ar.com.fdvs.dj.test.ImageBannerReportTest |This test shows how add images to the title of the report and the header | {{{../examples/ImageBannerReportTest.pdf}download}} |
*----------+--------------+
 

 <<Note>>
  This tests extends junit.framework.TestCase, but they also contain a main(...) method, we recommend to execute the test through the main method because the TestCase frameworks closes the JasperViewer (a window that shows the report) inmeadiatly.

 
Creating a simple plain Report

 This code shows how to create a simple report, the code is self explained

+------------------------------------------------------------------------------------------------------------+
DynamicReportBuilder drb = new DynamicReportBuilder();
        Integer margin = new Integer(20);
        drb.addTitle("November 2006 sales report")                    //defines the title of the report
            .addSubtitle("The items in this report correspond "
                    +"to the main products: Bovine meat,"+
                    " Chicken, Pig meat and Milky " )
            .addTitleStyle(titleStyle)                                //defines the style of the title
            .addDetailHeight(new Integer(15))                        //defines the height for each record of the report
            .addLeftMargin(margin)                                    //define the margin space for each side (top, bottom, right and left)
            .addRightMargin(margin)
            .addTopMargin(margin)
            .addBottomMargin(margin)
            .addColumnsPerPage(new Integer(1));                        //defines columns per page (like in the telephone guide)

        /**
         * Note that we still didn´t call the build() method
         */

        /**
         * Column definitions. We use a new ColumnBuilder instance for each
         * column, the ColumnBuilder.getInstance() method returns a new instance
         * of the builder
         */
        AbstractColumn columnState = ColumnBuilder.getInstance()        //creates a new instance of a ColumnBuilder
            .addColumnProperty("state", String.class.getName())            //defines the field of the data source that this column will show, also its type
            .addTitle("State")                                            //the title for the column
            .addWidth(new Integer(85))                                    //the width of the column
            .addStyle(detailStyle)                                        //defines the style for the records of this column
            .addHeaderStyle(headerStyle)                                //defines the style for the title of this column
            .build();                                                    //builds and return a new AbstractColumn

        //Create more columns
        AbstractColumn columnBranch = ColumnBuilder.getInstance()
            .addColumnProperty("branch", String.class.getName())
            .addTitle("Branch").addWidth(new Integer(85))
            .addStyle(detailStyle).addHeaderStyle(headerStyle).build();

        AbstractColumn columnaProductLine = ColumnBuilder.getInstance()
            .addColumnProperty("productLine", String.class.getName())
            .addTitle("Product Line").addWidth(new Integer(85))
            .addStyle(detailStyle).addHeaderStyle(headerStyle).build();

        AbstractColumn columnaItem = ColumnBuilder.getInstance()
            .addColumnProperty("item", String.class.getName())
            .addTitle("Item").addWidth(new Integer(85))
            .addStyle(detailStyle).addHeaderStyle(headerStyle).build();

        AbstractColumn columnCode = ColumnBuilder.getInstance()
            .addColumnProperty("id", Long.class.getName())
            .addTitle("ID").addWidth(new Integer(40))
            .addStyle(amountStyle).addHeaderStyle(headerStyle).build();

        AbstractColumn columnaCantidad = ColumnBuilder.getInstance()
            .addColumnProperty("quantity", Long.class.getName())
            .addTitle("Quantity").addWidth(new Integer(80))
            .addStyle(amountStyle).addHeaderStyle(headerStyle).build();

        AbstractColumn columnAmount = ColumnBuilder.getInstance()
            .addColumnProperty("amount", Float.class.getName())
            .addTitle("Amount").addWidth(new Integer(90))
            .addPattern("$ 0.00")                                            //defines a pattern to apply to the values swhown (uses TextFormat)
            .addStyle(amountStyle).addHeaderStyle(headerStyle).build();

        /**
         * We add the columns to the report (through the builder) in the order
         * we want them to appear
         */
        drb.addColumn(columnState);
        drb.addColumn(columnBranch);
        drb.addColumn(columnaProductLine);
        drb.addColumn(columnaItem);
        drb.addColumn(columnCode);
        drb.addColumn(columnaCantidad);
        drb.addColumn(columnAmount);

        /**
         * add some more options to the report (through the builder)
         */
        drb.addUseFullPageWidth(true);    //we tell the report to use the full width of the page. this rezises
                                        //the columns width proportionally to meat the page width.


        DynamicReport dr = drb.build();    //Finally build the report!

        JRDataSource ds = new JRBeanCollectionDataSource(TestRepositoryProducts.getDummyCollection());    //Create a JRDataSource, the Collection used
                                                                                                            //here contains dummy hardcoded objects...

        JasperPrint jp = DynamicJasperHelper.generateJasperPrint(dr, new ClassicLayoutManager(), ds);    //Creates the JasperPrint object, we pass as a Parameter
                                                                                                            //the DynamicReport, a new ClassicLayoutManager instance (this
                                                                                                            //one does the magic) and the JRDataSource
        JasperViewer.viewReport(jp);    //finally display the report report
+------------------------------------------------------------------------------------------------------------+

 The <<DynamicReportBuilder>> builds <<DynamicReport>> objects, this object contains the main options of the report (title, subtitle, styles, page size, orientation and a list of columns and groups)

 The <<ColumnBuilder>> builds <<SimpleColumn>> and <<ExpressionColumn>> objects depending the case (they both inherit from <<AbstractColumn>>).
 Each column holds basic data like the column title, the field from the datasource to show (it uses BeanUtils, so "a.b.c" can be passed as a property parameter), and how to show this data (style, pattern to apply, etc).  
 
*-----+
|Note that the property_name passed to ColumnBuilder.addColumnProperty("property_name", "property_class_name") method must match the name of a field/property in the elements contained in the datasource|
*-----+

Adding groups

 Using the same code as before, we add this few lines

+------------------------------------------------------------------------------------------------------------+
GroupBuilder gb1 = new GroupBuilder();
        ColumnsGroup g1 = gb1.addCriteriaColumn((PropertyColumn) columnState)        //define the criteria column to group by (columnState)
            .addFooterVariable(columnAmount,ColumnsGroupVariableOperation.SUM)        //tell the group place a variable in the footer
                                                                                    //of the column "columnAmount" with the SUM of all
                                                                                    //values of the columnAmount in this group.

            .addFooterVariable(columnaQuantity,ColumnsGroupVariableOperation.SUM)    //idem for the columnaQuantity column
            .addGroupLayout(GroupLayout.VALUE_IN_HEADER_WITH_COLNAMES)                //tells the group how to be shown, there are many
                                                                                    //posibilities, see the GroupLayout for more.
            .build();

        GroupBuilder gb2 = new GroupBuilder();                                        //Create another group (using another column as criteria)
        ColumnsGroup g2 = gb2.addCriteriaColumn((PropertyColumn) columnBranch)        //and we add the same operations for the columnAmount and
            .addFooterVariable(columnAmount,ColumnsGroupVariableOperation.SUM)        //columnaQuantity columns
            .addFooterVariable(columnaQuantity,ColumnsGroupVariableOperation.SUM)
            .build();

+------------------------------------------------------------------------------------------------------------+
 then we add the groups to the report (through the builder)

+------------------------------------------------------------------------------------------------------------+
drb.addColumn(columnState);
        drb.addColumn(columnBranch);
        drb.addColumn(columnaProductLine);
        drb.addColumn(columnaItem);
        drb.addColumn(columnCode);
        drb.addColumn(columnaQuantity);
        drb.addColumn(columnAmount);

        drb.addGroup(g1);    //add group g1
        drb.addGroup(g2);    //add group g2
+------------------------------------------------------------------------------------------------------------+

 Here the order of the group registration is important and should be consistent with the order of the registration of the columns. If we mess here, the resultant report wont have any meaning.
	
 <<Note:>>
 It´s important to remember tha the data from the datasource must be ordered with the same criteria we wont to group them.