	------------
	HOW-TO Integrate DynamicJasper with Webwork
	------------
HOW-TO Integrate DynamicJasper with Webwork

 Webwork actually integrates with Jasper Reports through the JasperReportsResult result-type, we extended this class to support
 DynamicJasper also.
 
 Firt you have to register the <<dynamic-jasper>> result-type in you <xwork.xml> like this

+-----------------------------------------------------------------------------+
<result-types>
	...
    <result-type name="dynamic-jasper" class="ar.com.fdvs.dj.webwork.DJResult"/>
    ...
</result-types>
+-----------------------------------------------------------------------------+

 Later in you action definition, the configuration
 
+-----------------------------------------------------------------------------+
<action name="myAcion" 	class="myActionClass" method="myMethod">
	...
	<result name="success" type="dynamic-jasper">
		 <param name="dynamicReport">myDynamicReport</param>
		 <param name="dataSource">datasource</param>
		 <param name="documentName">The_final_name_of_the_file</param>
		 <param name="contentDisposition">application/download</param>
		 <param name="format">PDF</param>
		 <param name="layoutManager">classic</param>
	</result>
</action>
+-----------------------------------------------------------------------------+
 
 The three important parameters here are <<dynamicReport>> which is the name of the property of the action which is an instance of DynamicReport
 
 The 2nd is <<format>> which tells the output format to generate.
 
 The 3rd is <<dataSource>> which is the name of the property of the action that contains the data source to use. 
 This property must be of the type of one of these  supported classes: 
  
  * <<JRDataSource>>: Any implementation
  
  * <<Collection>>
  
  * <<Object arrays>>: Object[]
  
  * <<javax.sql.ResultSet>>
  
  []
  
  If the type you need is not here (e.g: XML), the use JRDataSource and make sure your Action provides the proper implementation
 
 The <<layoutManager>> parameter defines the layout manager to use. The default value is <classic> (<<ClassicLayoutManager>>).
 
 Other possible values are:
 
 * <classic>: To use <<ClassicLayoutManager>>
 
 * <list>: To use <<ListLayoutManager>>
 
 * <$expresion>: evaluates the content of the expression. The expression must return <classic>, <list>, a <LayoutManager> object, or a java class name 
 
 * <Fully qualified java name>: instantiates the specified class (must implement the <LayoutManager> interface)
 